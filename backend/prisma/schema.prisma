generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model User {
  id          String       @id @default(uuid())
  fName       String
  lName       String
  email       String       @unique
  password    String
  profile     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  travelPlans TravelPlan[]
}

model TravelPlan {
  id           String            @id @default(uuid())
  userId       String
  name         String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  destinations PlanDestination[]
  user         User              @relation(fields: [userId], references: [id])
}

model Destination {
  id          String                  @id @default(uuid())
  name        String
  description String?
  image       String?
  location    Unsupported("geometry")
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  plans       PlanDestination[]
}

model PlanDestination {
  id            String      @id @default(uuid())
  planId        String
  destinationId String
  order         Int
  date          DateTime?
  destination   Destination @relation(fields: [destinationId], references: [id])
  plan          TravelPlan  @relation(fields: [planId], references: [id])

  @@unique([planId, destinationId, order])
}

model graph_edges {
  source   BigInt
  target   BigInt
  distance Float?

  @@id([source, target])
}

model graph_nodes {
  node_id BigInt                   @id
  lat     Float?
  lon     Float?
  geom    Unsupported("geometry")?
}
